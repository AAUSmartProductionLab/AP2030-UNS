# Build stage
FROM mcr.microsoft.com/devcontainers/base:jammy AS builder

ENV DEBIAN_FRONTEND=noninteractive

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    make \
    git \
    gcc \
    libssl-dev \
    python3-pip \
    python3-venv \
    pkg-config \
    uuid-dev \
    wget \
    libzmq3-dev \
    libsqlite3-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Setup Python environment
RUN python3 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"
RUN pip install --no-cache-dir paho-mqtt jsonschema conan

# Build third-party libraries from BT_Controller/third_party
WORKDIR /tmp/build_tp_devcontainer

# Copy local third_party sources (assuming Docker build context is workspace root)
COPY ./BT_Controller/third_party ./third_party

# Paho.mqtt.cpp
RUN mkdir paho_build && cd paho_build && \
    cmake ../third_party/paho.mqtt.cpp \
          -DCMAKE_INSTALL_PREFIX=/usr/local \
          -DCMAKE_BUILD_TYPE=Release \
          -DPAHO_WITH_MQTT_C=ON \
          -DPAHO_BUILD_STATIC=OFF \
          -DPAHO_BUILD_SHARED=ON \
          -DPAHO_WITH_SSL=ON \
          -DPAHO_BUILD_SAMPLES=OFF \
          -DPAHO_BUILD_EXAMPLES=OFF && \
    make -j$(nproc) && \
    make install && \
    cd .. && rm -rf paho_build

# BehaviorTree.CPP
RUN mkdir btcpp_build && cd btcpp_build && \
    cmake ../third_party/BehaviorTree.CPP \
          -DCMAKE_INSTALL_PREFIX=/usr/local \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
          -DBTCPP_SHARED_LIBS=ON \
          -DBTCPP_BUILD_TOOLS=ON \
          -DBTCPP_EXAMPLES=OFF \
          -DBUILD_TESTING=OFF \
          -DBTCPP_GROOT_INTERFACE=ON \
          -DBTCPP_SQLITE_LOGGING=ON \
          -DENABLE_DEBUG=ON && \
    make -j$(nproc) && \
    make install && \
    cd .. && rm -rf btcpp_build

# nlohmann/json
RUN mkdir json_build && cd json_build && \
    cmake ../third_party/json \
          -DCMAKE_INSTALL_PREFIX=/usr/local \
          -DCMAKE_BUILD_TYPE=Release \
          -DJSON_BuildTests=OFF && \
    make install && \
    cd .. && rm -rf json_build

# magic_enum
RUN mkdir magic_enum_build && cd magic_enum_build && \
    cmake ../third_party/magic_enum \
          -DCMAKE_INSTALL_PREFIX=/usr/local \
          -DCMAKE_BUILD_TYPE=Release \
          -DMAGIC_ENUM_OPT_BUILD_EXAMPLES=OFF \
          -DMAGIC_ENUM_OPT_BUILD_TESTS=OFF && \
    make install && \
    cd .. && rm -rf magic_enum_build

# json-schema-validator
RUN mkdir json_validator_build && cd json_validator_build && \
    cmake ../third_party/json-schema-validator \
          -DCMAKE_INSTALL_PREFIX=/usr/local \
          -DCMAKE_BUILD_TYPE=Release \
          -DJSON_VALIDATOR_BUILD_EXAMPLES=OFF \
          -DJSON_VALIDATOR_BUILD_TESTS=OFF && \
    make -j$(nproc) && \
    make install && \
    cd .. && rm -rf json_validator_build
RUN ldconfig

# Download and extract Groot2
WORKDIR /src
RUN wget https://s3.us-west-1.amazonaws.com/download.behaviortree.dev/groot2_linux_installer/Groot2-v1.6.1-x86_64.AppImage && \
    chmod +x Groot2-v1.6.1-x86_64.AppImage && \
    ./Groot2-v1.6.1-x86_64.AppImage --appimage-extract && \
    mkdir -p /opt/groot && \
    mv squashfs-root/* /opt/groot/

# Final stage
FROM mcr.microsoft.com/devcontainers/base:jammy

ENV DEBIAN_FRONTEND=noninteractive

# Install runtime dependencies and minimal dev tools
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    make \
    git \
    gcc \
    libssl-dev \
    python3-pip \
    python3-venv \
    sudo \
    pkg-config \
    uuid-dev \
    libfmt-dev \
    # Groot2 dependencies - add missing OpenGL libraries
    libglvnd0 libgl1 libglx0 libegl1 libxkbcommon0 libxcomposite1 \
    libxcursor1 libxdamage1 libxfixes3 libxi6 libxrandr2 libxtst6 libfontconfig1 \
    libopengl0 libglu1 mesa-utils \
    libyaml-cpp-dev ffmpeg libsm6 libxext6 \
    gdb \
    gdbserver \
    libzmq3-dev \
    libsqlite3-dev \
    libgtest-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Setup Python environment in final image
RUN python3 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"
RUN pip install --no-cache-dir paho-mqtt jsonschema conan numpy opencv-python pillow
# Copy installed libraries from builder
COPY --from=builder /usr/local/lib/ /usr/local/lib/
COPY --from=builder /usr/local/include/ /usr/local/include/
COPY --from=builder /usr/local/share/ /usr/local/share/
COPY --from=builder /opt/groot/ /opt/groot/
RUN ldconfig

# Create groot2 script that runs the executable directly
RUN echo '#!/bin/bash' > /usr/local/bin/groot2 && \
    echo 'cd /opt/groot && ./AppRun "$@"' >> /usr/local/bin/groot2 && \
    chmod +x /usr/local/bin/groot2

# Set working directory
WORKDIR /workspaces