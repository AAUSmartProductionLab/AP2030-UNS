<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="4">
  <BehaviorTree ID="Filling">
    <Sequence>
      <FillingRegistration CommandUuid="{_ID}"/>
      <MoveShuttle TargetPosition="2"/>
      <Dispense CommandUuid="{_ID}"/>
      <Fallback>
        <GenericConditionNode expected_value="2.0"
                              comparison_type="equal"
                              field_name="Weight"/>
        <RetryUntilSuccessful num_attempts="2">
          <Sequence>
            <Dispense CommandUuid="{_ID}"/>
            <GenericConditionNode expected_value="2.0"
                                  comparison_type="equal"
                                  field_name="Weight"/>
          </Sequence>
        </RetryUntilSuccessful>
      </Fallback>
    </Sequence>
  </BehaviorTree>

  <BehaviorTree ID="MainTree">
    <Sequence>
      <BuildProductionQueue ProductIDs="{ProductIDs}"/>
      <Parallel failure_count="3"
                success_count="3">
        <SubTree ID="Produce"
                 XbotId="1"
                 _autoremap="true"/>
        <SubTree ID="Produce"
                 XbotId="2"
                 _autoremap="true"/>
        <SubTree ID="Produce"
                 XbotId="3"
                 _autoremap="true"/>
      </Parallel>
    </Sequence>
  </BehaviorTree>

  <BehaviorTree ID="Produce">
    <GetProductFromQueue Product="{_ProductID}"
                         if_empty="SUCCESS"
                         Queue="{ProductIDs}">
      <Sequence>
        <MoveShuttle TargetPosition="1"/>
        <SubTree ID="Filling"
                 _autoremap="true"/>
        <SubTree ID="Stoppering"
                 _autoremap="true"/>
        <MoveShuttle TargetPosition="4"/>
      </Sequence>
    </GetProductFromQueue>
  </BehaviorTree>

  <BehaviorTree ID="Stoppering">
    <Sequence>
      <StopperRegistration CommandUuid="{_ID}"/>
      <MoveShuttle TargetPosition="3"/>
      <Stopper CommandUuid="{_ID}"/>
    </Sequence>
  </BehaviorTree>

  <!-- Description of Node Models (used by Groot) -->
  <TreeNodesModel>
    <Action ID="BuildProductionQueue">
      <output_port name="ProductIDs"
                   default="{ProductIDs}"
                   type="std::shared_ptr&lt;std::deque&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;">List of product IDs to produce</output_port>
    </Action>
    <Action ID="Dispense">
      <input_port name="CommandUuid"
                  default="{_ID}"
                  type="std::string">UUID for the command to execute</input_port>
    </Action>
    <Action ID="FillingRegistration">
      <output_port name="CommandUuid"
                   default="{_ID}"
                   type="std::string">UUID for the command to execute</output_port>
    </Action>
    <Condition ID="GenericConditionNode">
      <input_port name="expected_value"
                  type="std::string">Value to compare against</input_port>
      <input_port name="comparison_type"
                  type="std::string">Type of comparison: equal, not_equal, greater, less, contains</input_port>
      <input_port name="field_name"
                  type="std::string">Name of the field to monitor in the MQTT message</input_port>
    </Condition>
    <Decorator ID="GetProductFromQueue">
      <output_port name="Product"
                   default="{_ProductID}"
                   type="std::string">The product ID of the current product</output_port>
      <input_port name="if_empty"
                  default="SUCCESS"
                  type="BT::NodeStatus">Status to return if queue is empty: SUCCESS, FAILURE, SKIPPED</input_port>
      <input_port name="Queue"
                  default="{ProductIDs}"
                  type="std::string">The queue of all product IDs of the batch</input_port>
    </Decorator>
    <Action ID="MoveShuttle">
      <input_port name="TargetPosition"
                  type="int"/>
    </Action>
    <Action ID="Stopper">
      <input_port name="CommandUuid"
                  default="{_ID}"
                  type="std::string">UUID for the command to execute</input_port>
    </Action>
    <Action ID="StopperRegistration">
      <output_port name="CommandUuid"
                   default="{_ID}"
                   type="std::string">UUID for the command to execute</output_port>
    </Action>
  </TreeNodesModel>

</root>
