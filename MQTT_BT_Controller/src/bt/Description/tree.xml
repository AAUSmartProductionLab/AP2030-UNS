<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="4">
  <BehaviorTree ID="Filling">
    <Sequence>
      <FillingRegistration CommandUuid="{FillID}"/>
      <MoveShuttle TargetPosition="2"/>
      <Dispense CommandUuid="{FillID}"/>
      <Fallback>
        <GenericConditionNode expected_value="2.0"
                              comparison_type="equal"
                              field_name="Weight"/>
        <RetryUntilSuccessful num_attempts="2">
          <Sequence>
            <Dispense CommandUuid="{FillID}"/>
            <GenericConditionNode expected_value="2.0"
                                  comparison_type="equal"
                                  field_name="Weight"/>
          </Sequence>
        </RetryUntilSuccessful>
      </Fallback>
    </Sequence>
  </BehaviorTree>

  <BehaviorTree ID="MainTree">
    <Sequence>
      <Parallel failure_count="3"
                success_count="3">
        <SubTree ID="Produce"
                 XbotId="1"
                 _autoremap="true"/>
        <SubTree ID="Produce"
                 XbotId="2"
                 _autoremap="true"/>
        <SubTree ID="Produce"
                 XbotId="3"
                 _autoremap="true"/>
      </Parallel>
    </Sequence>
  </BehaviorTree>

  <BehaviorTree ID="Produce">
    <Sequence>
      <MoveShuttle TargetPosition="1"/>
      <SubTree ID="Filling"
               _autoremap="true"/>
      <SubTree ID="Stoppering"
               _autoremap="true"/>
      <MoveShuttle TargetPosition="4"/>
    </Sequence>
  </BehaviorTree>

  <BehaviorTree ID="Stoppering">
    <Sequence>
      <StopperRegistration CommandUuid="{StopperID}"/>
      <MoveShuttle TargetPosition="3"/>
      <Stopper CommandUuid="{StopperID}"/>
    </Sequence>
  </BehaviorTree>

  <!-- Description of Node Models (used by Groot) -->
  <TreeNodesModel>
    <Action ID="Dispense">
      <input_port name="CommandUuid"
                  type="std::string"/>
    </Action>
    <Action ID="FillingRegistration">
      <output_port name="CommandUuid"
                   type="std::string"/>
    </Action>
    <Condition ID="GenericConditionNode">
      <input_port name="expected_value"
                  type="std::string">Value to compare against</input_port>
      <input_port name="comparison_type"
                  type="std::string">Type of comparison: equal, not_equal, greater, less, contains</input_port>
      <input_port name="field_name"
                  type="std::string">Name of the field to monitor in the MQTT message</input_port>
    </Condition>
    <Action ID="MoveShuttle">
      <input_port name="TargetPosition"
                  type="int"/>
    </Action>
    <Action ID="Stopper">
      <input_port name="CommandUuid"
                  type="std::string"/>
    </Action>
    <Action ID="StopperRegistration">
      <output_port name="CommandUuid"
                   type="std::string"/>
    </Action>
  </TreeNodesModel>

</root>
