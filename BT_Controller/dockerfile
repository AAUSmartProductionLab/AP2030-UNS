FROM ubuntu:jammy AS third_party_builder

ENV DEBIAN_FRONTEND=noninteractive
ENV CMAKE_INSTALL_PREFIX=/opt/third_party_install

RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    make \
    git \
    pkg-config \
    libssl-dev \
    libzmq3-dev \
    libsqlite3-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /opt/build_tp

COPY ./BT_Controller/third_party ./third_party

# Paho.mqtt.cpp
RUN mkdir paho_build && cd paho_build && \
    cmake ../third_party/paho.mqtt.cpp \
          -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} \
          -DCMAKE_BUILD_TYPE=Release \
          -DPAHO_WITH_MQTT_C=ON \
          -DPAHO_BUILD_STATIC=OFF \
          -DPAHO_BUILD_SHARED=ON \
          -DPAHO_WITH_SSL=ON \
          -DPAHO_BUILD_SAMPLES=OFF \
          -DPAHO_BUILD_EXAMPLES=OFF && \
    make -j$(nproc) && \
    make install && \
    cd .. && rm -rf paho_build

# BehaviorTree.CPP
RUN mkdir btcpp_build && cd btcpp_build && \
    cmake ../third_party/BehaviorTree.CPP \
          -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
          -DBTCPP_SHARED_LIBS=ON \
          -DBTCPP_BUILD_TOOLS=ON \
          -DBTCPP_EXAMPLES=OFF \
          -DBUILD_TESTING=OFF \
          -DBTCPP_GROOT_INTERFACE=ON \
          -DBTCPP_SQLITE_LOGGING=ON \
          -DENABLE_DEBUG=ON && \
    make -j$(nproc) && \
    make install && \
    cd .. && rm -rf btcpp_build

RUN mkdir json_build && cd json_build && \
    cmake ../third_party/json \
          -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} \
          -DCMAKE_BUILD_TYPE=Release \
          -DJSON_BuildTests=OFF && \
    make install && \
    cd .. && rm -rf json_build

RUN mkdir magic_enum_build && cd magic_enum_build && \
    cmake ../third_party/magic_enum \
          -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} \
          -DCMAKE_BUILD_TYPE=Release \
          -DMAGIC_ENUM_OPT_BUILD_EXAMPLES=OFF \
          -DMAGIC_ENUM_OPT_BUILD_TESTS=OFF && \
    make install && \
    cd .. && rm -rf magic_enum_build

RUN mkdir json_validator_build && cd json_validator_build && \
    cmake ../third_party/json-schema-validator \
          -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} \
          -DCMAKE_BUILD_TYPE=Release \
          -DJSON_VALIDATOR_BUILD_EXAMPLES=OFF \
          -DJSON_VALIDATOR_BUILD_TESTS=OFF && \
    make -j$(nproc) && \
    make install && \
    cd .. && rm -rf json_validator_build

FROM ubuntu:jammy AS app_builder

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    make \
    pkg-config \
    libyaml-cpp-dev \
    libfmt-dev \
    uuid-dev \
    libgtest-dev \
    libssl-dev \
    libzmq5 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*
COPY --from=third_party_builder /opt/third_party_install /usr/local

RUN ldconfig

WORKDIR /src/AP2030-UNS

COPY ./BT_Controller/CMakeLists.txt ./BT_Controller/CMakeLists.txt
COPY ./schemas ./schemas/
COPY ./BT_Controller/src ./BT_Controller/src/
COPY ./BT_Controller/include ./BT_Controller/include/

WORKDIR /src/AP2030-UNS/BT_Controller
RUN mkdir -p build
# The WORKDIR for cmake and make should be the build directory
WORKDIR /src/AP2030-UNS/BT_Controller/build

RUN --mount=type=cache,target=/src/AP2030-UNS/BT_Controller/build \
    cmake ..

# Create a directory where artifacts will be copied to become part of the layer
RUN mkdir -p /opt/app_artifacts

RUN --mount=type=cache,target=/src/AP2030-UNS/BT_Controller/build \
    sh -c "make VERBOSE=1 -j$(nproc) && cp /src/AP2030-UNS/BT_Controller/build/bt_controller /opt/app_artifacts/"

# For debugging: This ls will show the build directory as it appears in the layer (likely empty or minimal)
RUN ls -l /src/AP2030-UNS/BT_Controller/build/
# For debugging: This ls should show your copied artifact
RUN ls -l /opt/app_artifacts/

FROM ubuntu:jammy

ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install -y \
    libssl3 \
    libuuid1 \
    libyaml-cpp0.7 \
    libfmt8 \
    libzmq5 \
    libsqlite3-0 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

COPY --from=third_party_builder /opt/third_party_install/lib/libpaho-mqtt*.so* /usr/local/lib/
COPY --from=third_party_builder /opt/third_party_install/lib/libbehaviortree_cpp.so* /usr/local/lib/
COPY --from=third_party_builder /opt/third_party_install/lib/libjson-schema-validator.so* /usr/local/lib/
RUN ldconfig

WORKDIR /app

# Copy the artifact from the location where it was placed in the layer
COPY --from=app_builder /opt/app_artifacts/bt_controller /app/bt_controller
COPY --from=app_builder /src/AP2030-UNS/schemas /app/schemas

WORKDIR /app
# Command to run the application
CMD ["./bt_controller"]