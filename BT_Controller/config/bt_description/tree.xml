<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="4">
  <BehaviorTree ID="Filling">
    <ReactiveSequence>
      <Data_Condition expected_value="operational"
                      comparison_type="equal"
                      Field="State"
                      Message="State"
                      Station="{Station}"/>
      <Sequence>
        <Station_Registration CommandUuid="{_ID}"
                              Station="{Station}"/>
        <MoveShuttle TargetPosition="{Station}"/>
        <Station_Execution CommandUuid="{_ID}"
                           Command="Tare"
                           Station="{Station}"/>
        <BC_Fallback>
          <Data_Condition expected_value="1.9;2.2"
                          comparison_type="inside"
                          Field="Weight"
                          Message="Weight"
                          Station="{Station}"/>
          <Sequence>
            <Data_Condition expected_value="0"
                            comparison_type="equal"
                            Field="Weight"
                            Message="Weight"
                            Station="{Station}"/>
            <Station_Execution CommandUuid="{_ID}"
                               Command="Dispense"
                               Station="{Station}"/>
          </Sequence>
          <Sequence>
            <Data_Condition expected_value="0"
                            comparison_type="greater"
                            Field="Weight"
                            Message="Weight"
                            Station="{Station}"/>
            <RetryUntilSuccessful num_attempts="2">
              <Station_Execution CommandUuid="{_ID}"
                                 Command="Refill"
                                 Station="{Station}"/>
            </RetryUntilSuccessful>
          </Sequence>
        </BC_Fallback>
        <Station_Unregistration CommandUuid="{_ID}"
                                Station="{Station}"/>
      </Sequence>
    </ReactiveSequence>
  </BehaviorTree>

  <BehaviorTree ID="MainTree">
    <Sequence>
      <Configure StationMap="{StationMap}"
                 ProductIDs="{ProductIDs}"/>
      <Parallel failure_count="-1"
                success_count="-1">
        <SubTree ID="Produce"
                 XbotTopic="Planar/Xbot1"
                 _autoremap="true"/>
        <SubTree ID="Produce"
                 XbotTopic="Planar/Xbot2"
                 _autoremap="true"/>
        <SubTree ID="Produce"
                 XbotTopic="Planar/Xbot3"
                 _autoremap="true"/>
      </Parallel>
    </Sequence>
  </BehaviorTree>

  <BehaviorTree ID="Produce">
    <ReactiveSequence>
      <Data_Condition expected_value="operational"
                      comparison_type="equal"
                      Field="State"
                      Message="State"
                      Station="{XbotTopic}"/>
      <GetProductFromQueue Product="{_ProductID}"
                           if_empty="SUCCESS"
                           Queue="{ProductIDs}">
        <Sequence>
          <MoveShuttle TargetPosition="Load"/>
          <SubTree ID="Filling"
                   Station="Filling"
                   _autoremap="true"/>
          <SubTree ID="Stoppering"
                   Station="Stoppering"
                   _autoremap="true"/>
          <SubTree ID="QualityControl"
                   Station="Camera"
                   _autoremap="true"/>
          <MoveShuttle TargetPosition="Unload"/>
        </Sequence>
      </GetProductFromQueue>
    </ReactiveSequence>
  </BehaviorTree>

  <BehaviorTree ID="QualityControl">
    <ReactiveSequence>
      <Data_Condition expected_value="operational"
                      comparison_type="equal"
                      Field="State"
                      Message="State"
                      Station="{Station}"/>
      <Sequence>
        <Station_Registration CommandUuid="{_ID}"
                              Station="{Station}"/>
        <MoveShuttle TargetPosition="{Station}"/>
        <Station_Execution CommandUuid="{_ID}"
                           Command="Capture"
                           Station="{Station}"/>
        <Station_Unregistration CommandUuid="{_ID}"
                                Station="{Station}"/>
      </Sequence>
    </ReactiveSequence>
  </BehaviorTree>

  <BehaviorTree ID="Stoppering">
    <ReactiveSequence>
      <Data_Condition expected_value="operational"
                      comparison_type="equal"
                      Field="State"
                      Message="State"
                      Station="{Station}"/>
      <Sequence>
        <Station_Registration CommandUuid="{_ID}"
                              Station="{Station}"/>
        <MoveShuttle TargetPosition="{Station}"/>
        <Station_Execution CommandUuid="{_ID}"
                           Command="Stopper"
                           Station="{Station}"/>
        <Station_Unregistration CommandUuid="{_ID}"
                                Station="{Station}"/>
      </Sequence>
    </ReactiveSequence>
  </BehaviorTree>

  <!-- Description of Node Models (used by Groot) -->
  <TreeNodesModel>
    <Control ID="BC_Fallback"/>
    <Action ID="Configure">
      <output_port name="StationMap"
                   default="{StationMap}"
                   type="std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt; &gt;">The StationMap of the system for this batch</output_port>
      <output_port name="ProductIDs"
                   default="{ProductIDs}"
                   type="std::shared_ptr&lt;std::deque&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;">List of product IDs to produce</output_port>
    </Action>
    <Condition ID="Data_Condition">
      <input_port name="expected_value"
                  type="std::string">Value to compare against</input_port>
      <input_port name="comparison_type"
                  type="std::string">Type of comparison: equal, not_equal, greater, less, contains</input_port>
      <input_port name="Field"
                  type="std::string">Name of the field to monitor in the MQTT message</input_port>
      <input_port name="Message"
                  type="std::string">The message from the station</input_port>
      <input_port name="Station"
                  default="{Station}"
                  type="std::string">The station from which to receive a message</input_port>
    </Condition>
    <SubTree ID="Filling"
             editable="true">
      <input_port name="Station"
                  default="Filling"/>
    </SubTree>
    <Decorator ID="GetProductFromQueue">
      <output_port name="Product"
                   default="{_ProductID}"
                   type="std::string">The product ID of the current product</output_port>
      <input_port name="if_empty"
                  default="SUCCESS"
                  type="BT::NodeStatus">Status to return if queue is empty: SUCCESS, FAILURE, SKIPPED</input_port>
      <input_port name="Queue"
                  default="{ProductIDs}"
                  type="std::shared_ptr&lt;std::deque&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;">The queue of all product IDs of the batch</input_port>
    </Decorator>
    <Action ID="MoveShuttle">
      <input_port name="TargetPosition"
                  type="std::string"/>
    </Action>
    <SubTree ID="Produce"
             editable="true">
      <input_port name="XbotTopic"/>
    </SubTree>
    <Action ID="Station_Execution">
      <input_port name="CommandUuid"
                  default="{_ID}"
                  type="std::string">UUID for the command to execute</input_port>
      <input_port name="Command"
                  default="Command"
                  type="std::string">The command to execute on the station</input_port>
      <input_port name="Station"
                  default="{Station}"
                  type="std::string">The station to register with</input_port>
    </Action>
    <Action ID="Station_Registration">
      <output_port name="CommandUuid"
                   default="{_ID}"
                   type="std::string">UUID for the command to execute</output_port>
      <input_port name="Station"
                  default="{_Station}"
                  type="std::string">The station to register with</input_port>
    </Action>
    <Action ID="Station_Unregistration">
      <input_port name="CommandUuid"
                  default="{_ID}"
                  type="std::string">UUID for the command to execute</input_port>
      <input_port name="Station"
                  default="{_Station}"
                  type="std::string">The station to unregister from</input_port>
    </Action>
    <SubTree ID="Stoppering"
             editable="true">
      <input_port name="Station"
                  default="Stoppering"/>
    </SubTree>
  </TreeNodesModel>

</root>
