<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="4">
  <BehaviorTree ID="Filling">
    <UseStation Uuid="{ProductID}"
                Station="{Station}">
      <ReactiveSequence>
        <ReactiveFallback>
          <Data_Condition expected_value="operational"
                          comparison_type="equal"
                          Field="State"
                          Message="State"
                          Station="{Station}"/>
          <Sleep msec="10000"/>
        </ReactiveFallback>
        <Sequence>
          <MoveToPosition Topic="{XbotTopic}"
                          Uuid="{ProductID}"
                          TargetPosition="{Station}"/>
          <Station_Execution Uuid="{ProductID}"
                             Command="Tare"
                             Station="{Station}"/>
          <BC_Fallback>
            <Data_Condition expected_value="2.0;2.2"
                            comparison_type="inside"
                            Field="Weight"
                            Message="Weight"
                            Station="{Station}"/>
            <Sequence>
              <Data_Condition expected_value="0"
                              comparison_type="equal"
                              Field="Weight"
                              Message="Weight"
                              Station="{Station}"/>
              <Station_Execution Uuid="{ProductID}"
                                 Command="Dispense"
                                 Station="{Station}"/>
            </Sequence>
            <Sequence>
              <Data_Condition expected_value="0"
                              comparison_type="greater"
                              Field="Weight"
                              Message="Weight"
                              Station="{Station}"/>
              <Refill_Node Uuid="{ProductID}"
                           Command="Refill"
                           Station="{Station}"/>
            </Sequence>
          </BC_Fallback>
        </Sequence>
      </ReactiveSequence>
    </UseStation>
  </BehaviorTree>

  <BehaviorTree ID="Load">
    <SequenceWithMemory>
      <PopElement ProductID="{ProductID}"
                  if_empty="SUCCESS"
                  Queue="{ProductIDs}"/>
      <UseStation Uuid="{ProductID}"
                  Station="{Station}">
        <ReactiveSequence>
          <ReactiveFallback>
            <Data_Condition expected_value="operational"
                            comparison_type="equal"
                            Field="State"
                            Message="State"
                            Station="{Station}"/>
            <Sleep msec="10000"/>
          </ReactiveFallback>
          <Sequence>
            <MoveToPosition Topic="{XbotTopic}"
                            Uuid="{ProductID}"
                            TargetPosition="{Station}"/>
            <Station_Execution Uuid="{ProductID}"
                               Command="Load"
                               Station="{Station}"/>
          </Sequence>
        </ReactiveSequence>
      </UseStation>
    </SequenceWithMemory>
  </BehaviorTree>

  <BehaviorTree ID="MainTree">
    <Sequence>
      <Configure StationMap="{StationMap}"
                 ProductIDs="{ProductIDs}"/>
      <Parallel failure_count="-1"
                success_count="1">
        <SubTree ID="Xbot_Production"
                 XbotTopic="Planar/Xbot1"
                 ProductID=""
                 _autoremap="true"/>
        <SubTree ID="Xbot_Production"
                 XbotTopic="Planar/Xbot2"
                 ProductID=""
                 _autoremap="true"/>
      </Parallel>
    </Sequence>
  </BehaviorTree>

  <BehaviorTree ID="QualityControl">
    <UseStation Uuid="{ProductID}"
                Station="{Station}">
      <ReactiveSequence>
        <ReactiveFallback>
          <Data_Condition expected_value="operational"
                          comparison_type="equal"
                          Field="State"
                          Message="State"
                          Station="{Station}"/>
          <Sleep msec="10000"/>
        </ReactiveFallback>
        <Sequence>
          <MoveToPosition Topic="{XbotTopic}"
                          Uuid="{ProductID}"
                          TargetPosition="{Station}"/>
          <Station_Execution Uuid="{ProductID}"
                             Command="Capture"
                             Station="{Station}"/>
        </Sequence>
      </ReactiveSequence>
    </UseStation>
  </BehaviorTree>

  <BehaviorTree ID="Scrap">
    <UseStation Uuid="{ProductID}"
                Station="{Station}">
      <ReactiveSequence>
        <ReactiveFallback>
          <Data_Condition expected_value="operational"
                          comparison_type="equal"
                          Field="State"
                          Message="State"
                          Station="{Station}"/>
          <Sleep msec="10000"/>
        </ReactiveFallback>
        <Sequence>
          <MoveToPosition Topic="{XbotTopic}"
                          Uuid="{ProductID}"
                          TargetPosition="{Station}"/>
          <Station_Execution Uuid="{ProductID}"
                             Command="Scrap"
                             Station="{Station}"/>
        </Sequence>
      </ReactiveSequence>
    </UseStation>
  </BehaviorTree>

  <BehaviorTree ID="Stoppering">
    <UseStation Uuid="{ProductID}"
                Station="{Station}">
      <ReactiveSequence>
        <ReactiveFallback>
          <Data_Condition expected_value="operational"
                          comparison_type="equal"
                          Field="State"
                          Message="State"
                          Station="{Station}"/>
          <Sleep msec="10000"/>
        </ReactiveFallback>
        <Sequence>
          <MoveToPosition Topic="{XbotTopic}"
                          Uuid="{ProductID}"
                          TargetPosition="{Station}"/>
          <Station_Execution Uuid="{ProductID}"
                             Command="Stopper"
                             Station="{Station}"/>
        </Sequence>
      </ReactiveSequence>
    </UseStation>
  </BehaviorTree>

  <BehaviorTree ID="Unload">
    <UseStation Uuid="{ProductID}"
                Station="{Station}">
      <ReactiveSequence>
        <ReactiveFallback>
          <Data_Condition expected_value="operational"
                          comparison_type="equal"
                          Field="State"
                          Message="State"
                          Station="{Station}"/>
          <Sleep msec="10000"/>
        </ReactiveFallback>
        <Sequence>
          <MoveToPosition Topic="{XbotTopic}"
                          Uuid="{ProductID}"
                          TargetPosition="{Station}"/>
          <Station_Execution Uuid="{ProductID}"
                             Command="Unload"
                             Station="{Station}"/>
        </Sequence>
      </ReactiveSequence>
    </UseStation>
  </BehaviorTree>

  <BehaviorTree ID="Xbot_Production">
    <KeepRunningUntilEmpty if_empty="SUCCESS"
                           Queue="{ProductIDs}">
      <ReactiveSequence>
        <ReactiveFallback>
          <Data_Condition expected_value="operational"
                          comparison_type="equal"
                          Field="State"
                          Message="State"
                          Station="{XbotTopic}"/>
          <Sleep msec="10000"/>
        </ReactiveFallback>
        <Fallback>
          <SequenceWithMemory>
            <SubTree ID="Load"
                     Station="Load"
                     _autoremap="true"/>
            <SubTree ID="Filling"
                     Station="Filling"
                     _autoremap="true"/>
            <SubTree ID="Stoppering"
                     Station="Stoppering"
                     _autoremap="true"/>
            <SubTree ID="QualityControl"
                     Station="Camera"
                     _autoremap="true"/>
            <SubTree ID="Unload"
                     Station="Unload"
                     _autoremap="true"/>
          </SequenceWithMemory>
          <SubTree ID="Scrap"
                   Station="Scrap"
                   _autoremap="true"/>
        </Fallback>
      </ReactiveSequence>
    </KeepRunningUntilEmpty>
  </BehaviorTree>

  <!-- Description of Node Models (used by Groot) -->
  <TreeNodesModel>
    <Control ID="BC_Fallback"/>
    <Action ID="Configure">
      <output_port name="StationMap"
                   default="{StationMap}"
                   type="std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt; &gt;">The StationMap of the system for this batch</output_port>
      <output_port name="ProductIDs"
                   default="{ProductIDs}"
                   type="std::shared_ptr&lt;std::deque&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;">List of product IDs to produce</output_port>
    </Action>
    <Condition ID="Data_Condition">
      <input_port name="expected_value"
                  type="std::string">Value to compare against</input_port>
      <input_port name="comparison_type"
                  type="std::string">Type of comparison: equal, not_equal, greater, less, contains</input_port>
      <input_port name="Field"
                  type="std::string">Name of the field to monitor in the MQTT message</input_port>
      <input_port name="Message"
                  type="std::string">The message from the station</input_port>
      <input_port name="Station"
                  default="{Station}"
                  type="std::string">The station from which to receive a message</input_port>
    </Condition>
    <SubTree ID="Filling"
             editable="true">
      <input_port name="Station"
                  default="Filling"/>
    </SubTree>
    <Decorator ID="KeepRunningUntilEmpty">
      <input_port name="if_empty"
                  default="SUCCESS"
                  type="BT::NodeStatus">Status to return if queue is empty: SUCCESS, FAILURE, SKIPPED</input_port>
      <input_port name="Queue"
                  default="{ProductIDs}"
                  type="std::shared_ptr&lt;std::deque&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;">The queue to monitor. Node runs child while this queue is not empty.</input_port>
    </Decorator>
    <SubTree ID="Load"
             editable="true">
      <input_port name="Station"
                  default="Load"/>
    </SubTree>
    <Action ID="MoveToPosition">
      <input_port name="Topic"
                  default="{Topic}"
                  type="std::string">Topic to which we want to send the request</input_port>
      <input_port name="Uuid"
                  default="{ProductID}"
                  type="std::string">UUID for the command to execute</input_port>
      <input_port name="TargetPosition"
                  default="{Station}"
                  type="std::string">The name of the station to move to</input_port>
    </Action>
    <Action ID="PopElement">
      <output_port name="ProductID"
                   default="{ProductID}"
                   type="std::string">The product ID popped from the queue.</output_port>
      <input_port name="if_empty"
                  default="SUCCESS"
                  type="BT::NodeStatus">Status to return if the queue is empty (SUCCESS, FAILURE, SKIPPED).</input_port>
      <input_port name="Queue"
                  default="{ProductIDs}"
                  type="std::shared_ptr&lt;std::deque&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;">The shared queue of product IDs. An element will be popped from it.</input_port>
    </Action>
    <Action ID="Refill_Node">
      <input_port name="Uuid"
                  default="{ID}"
                  type="std::string">UUID for the command to execute</input_port>
      <input_port name="Command"
                  default="Refill"
                  type="std::string">The command to execute on the station</input_port>
      <input_port name="Station"
                  default="{Station}"
                  type="std::string">The station to register with</input_port>
    </Action>
    <SubTree ID="Scrap"
             editable="true">
      <input_port name="Station"
                  default="Scrap"/>
    </SubTree>
    <Action ID="Station_Execution">
      <input_port name="Uuid"
                  default="{ID}"
                  type="std::string">UUID for the command to execute</input_port>
      <input_port name="Command"
                  default="Command"
                  type="std::string">The command to execute on the station</input_port>
      <input_port name="Station"
                  default="{Station}"
                  type="std::string">The station to register with</input_port>
    </Action>
    <SubTree ID="Stoppering"
             editable="true">
      <input_port name="Station"
                  default="Stoppering"/>
    </SubTree>
    <SubTree ID="Unload"
             editable="true">
      <input_port name="Station"
                  default="Unload"/>
    </SubTree>
    <Decorator ID="UseStation">
      <input_port name="Uuid"
                  default="{ID}"
                  type="std::string">UUID Used for registration</input_port>
      <input_port name="Station"
                  default="{Station}"
                  type="std::string">The station to register with</input_port>
    </Decorator>
    <SubTree ID="Xbot_Production"
             editable="true">
      <input_port name="XbotTopic"
                  default="Planar/Xbot1"/>
      <output_port name="ProductID"/>
    </SubTree>
  </TreeNodesModel>

</root>
